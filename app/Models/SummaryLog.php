<?php

namespace App\Models;

use Illuminate\Support\Facades\Auth;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Factories\HasFactory;

class SummaryLog extends Model
{
    use HasFactory;
    protected $fillable = [
        'reference_number', 'file_path', 'modified_by', 'hash', 'send_back_details', 'send_back_by', 'principal_id',
        'send_back_at', 'status_id', 'generated_by', 'verified_by', 'verified_at', 'approved_by', 'approved_at', 'received_by', 'received_at',
        'month', 'generated_user_id', 'verified_user_id', 'approved_user_id', 'received_user_id'
    ];

    protected static function boot()
    {
        parent::boot();

        static::creating(function ($model) {
            $summary = $model::orderBy('id', 'DESC')->first();
            $hash_id = $summary != NULL ? encrypt($summary->id + 1) : encrypt(1);
            $model->hash = $hash_id;
            $model->modified_by = Auth::user()->full_name;
        });

        static::updating(function ($model) {
            $model->modified_by = Auth::user()->full_name;
        });
    }

    // relationship
    public function summary_attachment()
    {
        return $this->hasMany(SummaryAttachment::class,'summary_log_id','id');
    }

    public function company()
    {
        return $this->belongsTo(Company::class, 'principal_id', 'id');
    }

    public function summary_generated_by()
    {
        return $this->belongsTo(User::class, 'generated_user_id', 'id');
    }

    public function summary_verified_by()
    {
        return $this->belongsTo(User::class, 'verified_user_id', 'id');
    }

    public function summary_approved_by()
    {
        return $this->belongsTo(User::class, 'approved_user_id', 'id');
    }

    public function summary_received_by()
    {
        return $this->belongsTo(User::class, 'received_user_id', 'id');
    }

    // accessor
    public function getAuditLogAttribute()
    {
        switch ($this->status_id) {
            case 2:
                $auditLog = '<p class="text-xs mt-1 font-semi">Generated By: ' . $this->generated_by . ', ' . $this->created_at . '</p>';
                break;
            case 3:
                $auditLog = '<p class="text-xs mt-1 font-semi">Generated By: ' . $this->generated_by . ', ' . $this->created_at . '</p>
                             <p class="text-xs mt-1 font-semi">Verified By: ' . $this->verified_by . ', ' . $this->verified_at . '</p>';
                break;
            case 4:
                $auditLog = '<p class="text-xs mt-1 font-semi">Generated By: ' . $this->generated_by . ', ' . $this->created_at . '</p>
                             <p class="text-xs mt-1 font-semi">Verified By: ' . $this->verified_by . ', ' . $this->verified_at . '</p>
                             <p class="text-xs mt-1 font-semi">Approved By: ' . $this->approved_by . ', ' . $this->approved_at . '</p>';
                break;
            case 5:
                $auditLog = '<p class="text-xs mt-1 font-semi">Generated By: ' . $this->generated_by . ', ' . $this->created_at . '</p>
                             <p class="text-xs mt-1 font-semi">Verified By: ' . $this->verified_by . ', ' . $this->verified_at . '</p>
                             <p class="text-xs mt-1 font-semi">Approved By: ' . $this->approved_by . ', ' . $this->approved_at . '</p>
                             <p class="text-xs mt-1 font-semi">Received By: ' . $this->received_by . ', ' . $this->received_at . '</p>';
                break;
            default:
                $auditLog = "";
                break;
        }

        return $auditLog;
    }

    public function getFormattedMonthAttribute()
    {
        $date = $this->month;
        $timestamp = strtotime($date);
        $month = date('F', $timestamp);

        return $month;
    }
}
